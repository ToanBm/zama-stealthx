import * as fs from "fs";
import * as path from "path";

const CONTRACT_NAMES = ["MyConfidentialToken-zUSD", "MyConfidentialToken-zBTC", "MyConfidentialToken-zETH"];

// <root>/packages/fhevm-hardhat-template
const rel = "../fhevm-hardhat-template";

// <root>/packages/site/components
const outdir = path.resolve("./abi");

if (!fs.existsSync(outdir)) {
  fs.mkdirSync(outdir);
}

// Create bytecode subdirectory
const bytecodeDir = path.join(outdir, "bytecode");
if (!fs.existsSync(bytecodeDir)) {
  fs.mkdirSync(bytecodeDir);
}

const dir = path.resolve(rel);
const dirname = path.basename(dir);

const line =
  "\n===================================================================\n";

if (!fs.existsSync(dir)) {
  // Unable to locate directory
  process.exit(1);
}

if (!fs.existsSync(outdir)) {
  // Unable to locate output directory
  process.exit(1);
}

const deploymentsDir = path.join(dir, "deployments");
// if (!fs.existsSync(deploymentsDir)) {
//   console.error(
//     `${line}Unable to locate 'deployments' directory.\n\n1. Goto '${dirname}' directory\n2. Run 'npx hardhat deploy --network ${chainName}'.${line}`
//   );
//   process.exit(1);
// }


function readDeployment(chainName, chainId, contractName, optional) {
  const chainDeploymentDir = path.join(deploymentsDir, chainName);


  if (!fs.existsSync(chainDeploymentDir)) {
    // Unable to locate deployment directory
    // 1. Goto '${dirname}' directory
    // 2. Run 'npx hardhat deploy --network ${chainName}'
    if (!optional) {
      process.exit(1);
    }
    return undefined;
  }

  const jsonString = fs.readFileSync(
    path.join(chainDeploymentDir, `${contractName}.json`),
    "utf-8"
  );

  const obj = JSON.parse(jsonString);
  obj.chainId = chainId;

  return obj;
}

// Generate ABI and addresses for all contracts
for (const contractName of CONTRACT_NAMES) {
  // Processing contract
  
  const deploySepolia = readDeployment("sepolia", 11155111, contractName, true /* optional */);

  if (!deploySepolia) {
    // No Sepolia deployment found, skipping
    continue;
  }

  // Tạo tên export khác nhau cho từng token
  const cleanExportName = contractName.replace(/-/g, '');
  
  const tsCode = `
/*
  This file is auto-generated.
  Command: 'npm run genabi'
*/
export const ${cleanExportName}ABI = ${JSON.stringify({ abi: deploySepolia.abi }, null, 2)} as const;
\n`;

  const tsAddresses = `
/*
  This file is auto-generated.
  Command: 'npm run genabi'
*/
export const ${cleanExportName}Addresses = { 
  "11155111": { address: "${deploySepolia.address}", chainId: 11155111, chainName: "sepolia" },
};
`;

  // Generated ABI and addresses files

  fs.writeFileSync(path.join(outdir, `${contractName}ABI.ts`), tsCode, "utf-8");
  fs.writeFileSync(
    path.join(outdir, `${contractName}Addresses.ts`),
    tsAddresses,
    "utf-8"
  );

  // Chỉ generate bytecode cho contract đầu tiên (MyConfidentialToken-zUSD)
  if (contractName === CONTRACT_NAMES[0]) {
    // Bỏ phần -zUSD khỏi tên file bytecode
    const cleanContractName = contractName.replace(/-z(USD|BTC|ETH)$/, '');
    
    const tsBytecode = `
/*
  This file is auto-generated.
  Command: 'npm run genabi'
*/
export const ${cleanContractName}Bytecode = "${deploySepolia.bytecode}" as const;
`;

    // Generated bytecode file
    fs.writeFileSync(
      path.join(bytecodeDir, `${cleanContractName}Bytecode.ts`),
      tsBytecode,
      "utf-8"
    );
  }
}

// ABI generation completed
